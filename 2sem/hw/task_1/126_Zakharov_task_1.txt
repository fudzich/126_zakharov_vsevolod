DynamicArray | 11 | size = 1; -> size = DefaultSize;   | createArray_createArrayWithNothing_SizeEqualsDefaultSize
DynamicArray | 21 | if(newSize > 0) -> if(newSize < 0) | resize_NewSizeIsBiggerThenZero_SizeEqualsNewSize
DynamicArray | 27 | newSize = size; -> size = newSize; | resize_NewSizeIsBiggerThenZero_SizeEqualsNewSize
DynamicArray | 30 | if(index < 0 || index > size) -> if(index < 0 || index >= size) | get_GettingIndexTheNumberOfSize_OutOfBounds
DynamicArray | 35 | if(index < 0 || index > size) -> if(index < 0 || index >= size) | set_GettingIndexTheNumberOfSize_OutOfBounds
DynamicArray | 15 | data = new Object[capacity]; -> data = new Object[size]; | set_IndexEqualsZeroValueEqualsOne_ValueIsSet
DynamicArray | 42 | if(capacity < size) { -> if(capacity <= size) { | insert_IndexEqualsZeroValue1EqualsOneValue2EqualsTwo_Value2IsInserted
DynamicArray | 49 | data[size] = value; -> data[index] = value; | insert_IndexEqualsZeroValue1EqualsOneValue2Equals2_Value2IsInserted
DynamicArray | 40 | if(index < 0 || index > size) -> if(index < 0 || index >= size) | insert_GettingIndexTheNumberOfSize_OutOfBalance
DynamicArray | 56 | data[capacity] = value; -> data[size] = value; | pushBack_ValueEqualsThree_ValueIsPushedToTheBack
DynamicArray | 52 | if(capacity < size) { -> if(capacity <= size) { | pushBack_ValueEqualsThree_ValueIsPushedToTheBack
DynamicArray | 60 | if(size < 0) -> if(size <= 0) | popBack_SizeEqualsZero_MessageIsThrown
DynamicArray | 66 | if(index < 0 || index > size) -> if(index < 0 || index >= size) | remove_RemovingFromNonExistentIndex_OutOfBounds

Node | 13 | this.next = prev; -> this.next = next; | pushFront_PushFrontToNotEmptyList_DataIsPushed
Node | 14 | this.prev = next; -> this.prev = prev; | pushFront_PushFrontToNotEmptyList_DataIsPushed

DoubleLinkedList | 17 | return dummy.getPrev(); -> return dummy.getNext(); | pushFront_PushFrontToNotEmptyList_DataIsPushed
DoubleLinkedList | 20 | return dummy.getNext(); -> return dummy.getPrev(); | pushFront_PushFrontToNotEmptyList_DataIsPushed
DoubleLinkedList | 41 | return insertBefore(getTail(), data); -> return insertAfter(getTail(), data); | pushFront_PushFrontToNotEmptyList_DataIsPushed
DoubleLinkedList | 28 | cur = cur.getPrev(); -> cur = cur.getNext(); | pushFront_PushFrontToNotEmptyList_DataIsPushed
DoubleLinkedList | 33 | --size; -> ++size; | pushFront_PushFrontToNotEmptyList_DataIsPushed
DoubleLinkedList | 44 | return insertAfter(getHead(), data); -> return insertAfter(getTail(), data); | pushBack_PushBackToNotEmptyList_DataIsPushed
DoubleLinkedList | 11 | return dummy == dummy; -> return size == 0; | createList_CreateListWithSomething_ListIsNotEmpty
DoubleLinkedList | 47 | node.getPrev().setPrev(node.getNext()); -> node.getPrev().setNext(node.getNext()); | remove_RemoveItemFromList_ItemsAreMoved
DoubleLinkedList | 48 | node.getNext().setNext(node.getPrev()); -> node.getNext().setPrev(node.getPrev()); | remove_RemoveItemFromList_ItemsAreMoved
DoubleLinkedList | 24 | if(index < 0 || index > size) -> if(index < 0 || index >= size) | get_GetIndexAsSize_OutOfBounds
DoubleLinkedList | 55 | list.getHead().setNext(node); -> list.getHead().setPrev(node); | insertListAfter_insertListAfterSecondItem_ItemsOfTheFirstListAreMoved
DoubleLinkedList | 56 | list.getTail().setPrev(node.getNext()); -> list.getTail().setNext(node.getNext()); | insertListAfter_insertListAfterSecondItem_ItemsOfTheFirstListAreMoved
DoubleLinkedList | 62 | } -> size += list.getSize();} | insertListAfter_insertListAfterSecondItem_ItemsOfTheFirstListAreMoved
DoubleLinkedList | 66 | list.getHead().setNext(node.getPrev()); -> list.getHead().setPrev(node.getPrev()); | insertList_insertListBeforeFirstItem_AllElementsAreCorrect
DoubleLinkedList | 67 | list.getTail().setPrev(node); -> list.getTail().setNext(node); | insertList_insertListBeforeFirstItem_AllElementsAreCorrect
DoubleLinkedList | 73 | } -> size += list.getSize();} | insertList_insertListBeforeFirstItem_AllElementsAreCorrect